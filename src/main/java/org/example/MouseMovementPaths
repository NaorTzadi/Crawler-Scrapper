package org.example;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
public class MouseMovementPaths {
    private static final List<String> movementPaths =new ArrayList<>();
    private static final List<String> formulaPaths =new ArrayList<>();
    private static final List<List<Point>> formulaPathsRightToTheElement =new ArrayList<>();
    private static final List<List<Point>> formulaPathsLeftToTheElement =new ArrayList<>();
    public static List<List<Point>> getFormulaPathsRightToTheElement(){return formulaPathsRightToTheElement;}
    public static List<List<Point>> getFormulaPathsLeftToTheElement(){return formulaPathsLeftToTheElement;}
    private static final List<Point> mouseToScreenPathFormulaUpperRightSide=new ArrayList<>();
    private static final List<Point> mouseToScreenPathFormulaUpperLeftSide = new ArrayList<>();
    private static final List<Point> mouseToScreenPathFormulaBottomRightSide = new ArrayList<>();
    private static final List<Point> mouseToScreenPathFormulaBottomLeftSide = new ArrayList<>();
    public static List<Point> getMouseToScreenPathFormulaUpperRightSide(){return mouseToScreenPathFormulaUpperRightSide;}
    public static List<Point> getMouseToScreenPathFormulaUpperLeftSide(){return mouseToScreenPathFormulaUpperLeftSide;}
    public static List<Point> getMouseToScreenPathFormulaBottomRightSide(){return mouseToScreenPathFormulaBottomRightSide;}
    public static List<Point> getMouseToScreenPathFormulaBottomLeftSide(){return mouseToScreenPathFormulaBottomLeftSide;}
    public static void fillPaths(){
        //fillMovementPaths();
        //processMovementPaths();
        fillMouseToScreenFormulas();
        fillFormulasPaths();
        fillPathFormulas();
    }
    private static void fillPathFormulas() {
        for (String formula : formulaPaths) {
            String[] lines = formula.split("\n");
            List<Point> pathFormula = new ArrayList<>();
            List<Point> mirroredPathFormula = new ArrayList<>();

            for (String line : lines) {
                String[] parts = line.split(",");
                int x = Integer.parseInt(parts[0].trim());
                int y = Integer.parseInt(parts[1].trim());

                Point originalPoint = new Point(x, y);
                Point mirroredPoint = new Point(-x, y); // Mirror along the X-axis

                pathFormula.add(originalPoint);
                mirroredPathFormula.add(mirroredPoint);

            }
            formulaPathsRightToTheElement.add(pathFormula);
            formulaPathsLeftToTheElement.add(mirroredPathFormula);
        }
    }
    private static void fillMouseToScreenFormulas(){
        String[] lines = mouseToScreenFormula.split("\n");
        for (String line:lines){
            String[] parts = line.split(",");
            int x = Integer.parseInt(parts[0].trim());
            int y = Integer.parseInt(parts[1].trim());
            mouseToScreenPathFormulaUpperRightSide.add(new Point(x,y));
            mouseToScreenPathFormulaUpperLeftSide.add(new Point(-x,y));
            mouseToScreenPathFormulaBottomRightSide.add(new Point(x,-y));
            mouseToScreenPathFormulaBottomLeftSide.add(new Point(-x,-y));
        }
    }
    private static void processMovementPaths() {
        for (String movementPath : movementPaths) {
            String[] lines = movementPath.split("\n");
            List<Point> refinedPath = new ArrayList<>();
            List<Point> pathDelta = new ArrayList<>();

            for (int i = 0; i < lines.length; i++) {
                String[] parts = lines[i].split(",");
                int x = Integer.parseInt(parts[0].trim());
                int y = Integer.parseInt(parts[1].trim());
                refinedPath.add(new Point(x, y));

                if (i > 0) {
                    Point previousPoint = refinedPath.get(i - 1);
                    int xDifference = x - previousPoint.x;
                    int yDifference = y - previousPoint.y;
                    System.out.println(xDifference+","+yDifference);
                    pathDelta.add(new Point(xDifference, yDifference));
                }
            }
            formulaPathsRightToTheElement.add(pathDelta);
        }
    }
    private static void fillMovementPaths(){
        movementPaths.add("""
                        1267,25
                        1265,27
                        1264,28
                        1262,29
                        1261,30
                        1258,33
                        1257,34
                        1255,36
                        1253,37
                        1250,38
                        1247,41
                        1243,44
                        1240,46
                        1236,48
                        1231,52
                        1225,56
                        1216,62
                        1207,68
                        1199,74
                        1188,81
                        1173,91
                        1154,102
                        1130,115
                        1104,129
                        1073,144
                        1038,160
                        1002,177
                        962,195
                        923,216
                        886,238
                        842,266
                        802,291
                        764,316
                        732,338
                        697,362
                        664,383
                        634,405
                        602,426
                        574,445
                        544,466
                        514,486
                        487,502
                        466,518
                        443,534
                        422,547
                        402,561
                        386,572
                        373,581
                        359,587
                        351,593
                        344,597
                        337,600
                        334,602
                        333,603
                        331,604
                        330,604
                        330,604
                        330,604
                        332,604
                        334,604
                        335,604
                        337,604
                        338,603
                        341,602
                        341,602
                        342,602
                        342,602
                        342,601
                        343,601
                       """);
    }
    private static void fillFormulasPaths(){
        formulaPaths.add("""
                -1,3
                0,1
                -1,1
                0,1
                -1,0
                -1,1
                0,0
                0,1
                -1,0
                0,0
                0,2
                -3,1
                -1,1
                -2,1
                -2,2
                0,0
                -3,1
                -2,2
                -1,1
                -2,0
                -1,0
                -1,0
                0,2
                -2,1
                -2,1
                -4,1
                -4,1
                -3,1
                -5,1
                -6,1
                -5,1
                -3,0
                -5,1
                -3,0
                -5,0
                -7,0
                -7,0
                -8,1
                -8,0
                -7,0
                -10,0
                -8,0
                -8,0
                -8,0
                -8,0
                -8,-1
                -6,-1
                -9,-1
                -9,-2
                -10,-3
                -10,-1
                -9,-3
                -10,-4
                -7,-3
                -6,-3
                -5,-2
                -5,-4
                -2,-2
                -1,-1
                -1,-1
                -1,-2
                -1,0
                0,-2
                0,0
                -1,-1
                0,-1
                0,-1
                0,-1
                0,0
                0,-1
                0,-1
                0,-1
                0,-1
                1,0
                0,-1
                2,-1
                2,-1
                0,-1
                3,-1
                1,-1
                1,0
                2,-1
                1,0
                0,-1
                1,0
                2,0
                1,0
                0,0
                1,0
                1,0
                1,0
                1,0
                0,0
                1,0
                1,1
                1,1
                1,1
                0,1
                2,0
                1,2
                1,1
                0,1
                0,0
                1,1
                1,2
                0,1
                1,1
                0,2
                0,1
                0,1
                0,2
                0,1
                -2,2
                -1,2
                -3,2
                -2,2
                -2,2
                -5,5
                -4,3
                -3,2
                -5,2
                -5,2
                -3,1
                -2,1
                -5,2
                -3,1
                -4,1
                -6,2
                -6,0
                -6,1
                -6,3
                -7,0
                -8,1
                -9,3
                -6,0
                -8,1
                -6,2
                -10,1
                -7,0
                -6,1
                -6,2
                -2,0
                -3,0
                -1,1
                -1,0
                -1,0
                0,1
                -1,0
                0,1
                0,0
                -1,0
                """);
    }
    private static final String mouseToScreenFormula= """
            -2,2
            -1,1
            -2,1
            -1,1
            -3,3
            -1,1
            -2,2
            -2,1
            -3,1
            -3,3
            -4,3
            -3,2
            -4,2
            -5,4
            -6,4
            -9,6
            -9,6
            -8,6
            -11,7
            -15,10
            -19,11
            -24,13
            -26,14
            -31,15
            -35,16
            -36,17
            -40,18
            -39,21
            -37,22
            -44,28
            -40,25
            -38,25
            -32,22
            -35,24
            -33,21
            -30,22
            -32,21
            -28,19
            -30,21
            -30,20
            -27,16
            -21,16
            -23,16
            -21,13
            -20,14
            -16,11
            -13,9
            -14,6
            -8,6
            -7,4
            -7,3
            -3,2
            -1,1
            -2,1
            -1,0
            0,0
            0,0
            2,0
            2,0
            1,0
            2,0
            1,-1
            3,-1
            0,0
            1,0
            0,0
            0,-1
            1,0""";
}


