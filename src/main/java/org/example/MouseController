package org.example;
import org.openqa.selenium.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Random;
public class MouseController {
    private final WebDriver driver;
    private final WebElement element;
    private final Robot robot;
    private final Random random;
    private final String MOUSE_LOCATION_UP="up";
    private final String MOUSE_LOCATION_DOWN="down";
    private final String MOUSE_LOCATION_LEFT="left";
    private final String MOUSE_LOCATION_RIGHT="right";
    private final String MOUSE_LOCATION_INLINE="inline";
    private final  java.awt.Dimension screenResolution = Toolkit.getDefaultToolkit().getScreenSize();
    public MouseController(WebDriver driver, WebElement element) throws AWTException {
        this.driver = driver;
        this.element = element;
        this.robot = new Robot();
        this.random = new Random();
    }
    public void moveToElement() throws InterruptedException {
        Thread.sleep(200+random.nextInt(1000)); // חכה שהעמוד יטען למרות שבכללי הוא יקבל את ה-driver כשהעמוד כבר פתוח ומוכן ברוב המקרים
        if (!isWindowMaximized()){maximizeWindowPage();Thread.sleep(100+random.nextInt(200));}
        ifElementIsOutOfViewScrollToElement();

        //System.out.println("mouse distance to element: "+getTheDistanceTheMouseNeedsToTravelToGetToTheDestination(element.getLocation()));
        //System.out.println("element destination: "+element.getLocation().x+","+element.getLocation().y);
        //System.out.println(getMouseLocationFromElementLocationInSimpleTerms());
        //System.out.println("false destination: "+getFalseDestinationInOrderToMimicHumanLikeInaccuracy());
        //System.out.println(isElementInView());
        //System.exit(1);
        
        moveMouse(getFalseDestinationInOrderToMimicHumanLikeInaccuracy(),false);
        moveMouse(getElementPositionRelativeToViewport(),true);
        if (isElementClickable()){robotDoClick();}
    }
    //x= '-' left
    //x= '+' right
    //y= '-' up
    //y= '+' down
    private void moveMouse(Point destination,boolean didRandomMovement) throws InterruptedException {
        java.awt.Point currentLocation = MouseInfo.getPointerInfo().getLocation();
        boolean xReached = false, yReached = false;
        int proximityThreshold = 10;
        int iterationsCount=0;
        long startTime=System.currentTimeMillis();
        while (!(xReached && yReached)) {
            System.out.println("current x: " + currentLocation.x + "   current y: " + currentLocation.y);

            int xDistance = destination.x - currentLocation.x;
            int yDistance = destination.y - currentLocation.y;

            // Check if x and y coordinates are close enough to the destination
            xReached = Math.abs(xDistance) <= proximityThreshold;
            yReached = Math.abs(yDistance) <= proximityThreshold;

            if (!didRandomMovement&&1+random.nextInt(30)==30){doRandomMovement();didRandomMovement=true;currentLocation=MouseInfo.getPointerInfo().getLocation();}
            if (!xReached || !yReached) {
                double totalDistance = Math.sqrt(xDistance * xDistance + yDistance * yDistance);
                double xRatio = totalDistance != 0 ? Math.abs((double)xDistance) / totalDistance : 0;
                double yRatio = totalDistance != 0 ? Math.abs((double)yDistance) / totalDistance : 0;

                int baseXStep = (int) Math.round(xRatio * 10);
                int baseYStep = (int) Math.round(yRatio * 10);

                // Add randomness to the step sizes, while keeping them proportional
                int xStep = baseXStep + (baseXStep != 0 ? random.nextInt(3) - 1 : 0); // Randomly adjust by -1 to +1
                int yStep = baseYStep + (baseYStep != 0 ? random.nextInt(3) - 1 : 0); // Randomly adjust by -1 to +1

                xStep *= (xDistance > 0) ? 1 : -1;
                yStep *= (yDistance > 0) ? 1 : -1;

                int nextX = currentLocation.x + xStep;
                int nextY = currentLocation.y + yStep;

                // Break the loop if the next move is out of the screen
                if (nextX < 0 || nextX > screenResolution.width || nextY < 0 || nextY > screenResolution.height) {break;}
                robot.mouseMove(nextX, nextY);
                currentLocation = MouseInfo.getPointerInfo().getLocation();
                Thread.sleep(getRandomPause());
            }
            iterationsCount++;
        }
        robot.mouseMove(destination.x + 5, destination.y + 5);
        Thread.sleep(getRandomPause());
        robot.mouseMove(destination.x, destination.y);

        System.out.println("Iterations: " + iterationsCount);//למחוק אחרי שהכל עובד
        long endTime=System.currentTimeMillis();             //
        long elapsedTime = endTime - startTime;              //
        System.out.println("time taken: "+elapsedTime);      //למחוק אחרי שהכל עובד
    }
    private boolean isElementInView() {
        Point location = element.getLocation();
        JavascriptExecutor js = (JavascriptExecutor) driver;
        Number pageHeight = (Number) js.executeScript("return window.innerHeight;");
        Number scrollTop = (Number) js.executeScript("return window.pageYOffset;");
        long elementTop = location.getY();
        long elementBottom = elementTop + element.getSize().getHeight();
        return elementTop >= scrollTop.longValue() && elementBottom <= (scrollTop.longValue() + pageHeight.longValue());
    }

    private void ifElementIsOutOfViewScrollToElement() throws InterruptedException { // מה אם האלמנט נראה לעין כאשר מגללים לרוחב ולא לאורך?
       //להוזיז את העכבר שיהיה על העמוד איפשהו
        final int pixelsPassedPerFullScroll=800; //בערך כמות הפיקסלים שהאדם עובר בממוצע בכל גלילה מלאה
        final int pixelsToScrollPerNotch=16;
        int sumPixelsPassedPerNotch=0;
        while (!isElementInView()) {
            if (sumPixelsPassedPerNotch>pixelsPassedPerFullScroll){
                sumPixelsPassedPerNotch=0;
                Thread.sleep(100+random.nextInt(150));// long brake
            }
            sumPixelsPassedPerNotch+=pixelsToScrollPerNotch;
            ((JavascriptExecutor) driver).executeScript("window.scrollBy(0,"+pixelsToScrollPerNotch+");"); // Scrolls down random pixels distance
            Thread.sleep(10+random.nextInt(11)); // short brake
        }
        for (int i=0;i<8;i++){ // תעקוף את היעד קצת
            ((JavascriptExecutor) driver).executeScript("window.scrollBy(0,"+pixelsToScrollPerNotch+");");
            Thread.sleep(10+random.nextInt(11));
        }
        for (int i=0;i<6;i++){ // תחזור אל היעד
            ((JavascriptExecutor) driver).executeScript("window.scrollBy(0,"+-pixelsToScrollPerNotch+");");
            Thread.sleep(10+random.nextInt(11));
        }
        Thread.sleep(10+random.nextInt(20));
    }
    private void doRandomMovement() throws InterruptedException {
        List<List<java.awt.Point>> pathsFormulas;
        if (getMouseLocationFromElementLocationInSimpleTerms().contains(MOUSE_LOCATION_LEFT)){
            pathsFormulas=MouseMovementPaths.getPathsFormulasLeftToTheElement();
        }else {
            pathsFormulas=MouseMovementPaths.getPathsFormulasRightToTheElement();
        }
        java.awt.Point currentLocation = MouseInfo.getPointerInfo().getLocation();
        for (java.awt.Point delta : pathsFormulas.get(random.nextInt(pathsFormulas.size()))) {
            currentLocation.x += delta.x;
            currentLocation.y += delta.y;
            robot.mouseMove(currentLocation.x, currentLocation.y);
            Thread.sleep(getRandomPause());
        }
    }
    private Point getElementPositionRelativeToViewport() {
        Point absolutePosition = element.getLocation();
        JavascriptExecutor js = (JavascriptExecutor) driver;
        long scrollX = (long) js.executeScript("return window.pageXOffset;");
        long scrollY = (long) js.executeScript("return window.pageYOffset;");
        int relativeX = absolutePosition.getX() - (int) scrollX;
        int relativeY = absolutePosition.getY() - (int) scrollY;
        return new Point(relativeX, relativeY);
    }
    private Point getFalseDestinationInOrderToMimicHumanLikeInaccuracy(){
        String mouseLocationFromTheElementInSimpleTerms=getMouseLocationFromElementLocationInSimpleTerms();
        Point elementPosition=getElementPositionRelativeToViewport();
        int limitX=screenResolution.width-elementPosition.x;if (limitX>100){limitX=100;}
        int limitY=screenResolution.height-elementPosition.y;if (limitY>100){limitY=100;}
        if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_LEFT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_UP)){
            return new Point(elementPosition.x-random.nextInt(limitX+1),elementPosition.y+random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_RIGHT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_UP)){
            return new Point(elementPosition.x+random.nextInt(limitX+1),elementPosition.y+random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_LEFT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_DOWN)){
            return new Point(elementPosition.x-random.nextInt(limitX+1),elementPosition.y-random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_RIGHT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_DOWN)){
            return new Point(elementPosition.x+random.nextInt(limitX+1),elementPosition.y-random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_INLINE)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_UP)){
            return new Point(elementPosition.x+random.nextInt(limitX+1),elementPosition.y+random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_INLINE)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_DOWN)){
            return new Point(elementPosition.x-random.nextInt(limitX+1),elementPosition.y-random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_LEFT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_INLINE)){
            return new Point(elementPosition.x-random.nextInt(limitX+1),elementPosition.y-random.nextInt(limitY+1));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_RIGHT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_INLINE)){
            return new Point(elementPosition.x+random.nextInt(limitX+1),elementPosition.y+random.nextInt(limitY+1));
        }
        return null;
    }
   /* private Point getFalseDestinationInOrderToMimicHumanLikeInaccuracy(){
        String mouseLocationFromTheElementInSimpleTerms=getMouseLocationFromElementLocationInSimpleTerms();
        int limitX=screenResolution.width-element.getLocation().x;
        int limitY=screenResolution.height-element.getLocation().y;
        if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_LEFT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_UP)){
            return new Point(element.getLocation().x-random.nextInt(100),element.getLocation().y+random.nextInt(100));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_RIGHT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_UP)){
            return new Point(element.getLocation().x+random.nextInt(100),element.getLocation().y+random.nextInt(100));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_LEFT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_DOWN)){
            return new Point(element.getLocation().x-random.nextInt(100),element.getLocation().y-random.nextInt(100));
        }else if (mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_RIGHT)&&mouseLocationFromTheElementInSimpleTerms.contains(MOUSE_LOCATION_DOWN)){
            return new Point(element.getLocation().x+random.nextInt(100),element.getLocation().y-random.nextInt(100));
        }
        return null;
    }*/
    private int getRandomPause(){
        int pauseLevel=random.nextInt(3);
        if (pauseLevel==0){
            return 10+random.nextInt(10);
        }else if (pauseLevel==1){
            return 10+random.nextInt(20);
        }else {
            return 10+random.nextInt(30);
        }
    }
    private void robotDoClick(){
        robot.mousePress(InputEvent.BUTTON1_MASK);
        robot.delay(getRandomPause());
        robot.mouseRelease(InputEvent.BUTTON1_MASK);
    }
    private Point getTheDistanceTheMouseNeedsToTravelToGetToTheDestination(Point destination){ // למחוק-רק לצורך בדיקה
        java.awt.Point mouseLocation = MouseInfo.getPointerInfo().getLocation();
        return new Point(Math.abs(mouseLocation.x-destination.x),Math.abs(mouseLocation.y-destination.y));
    }
    private String getMouseLocationFromElementLocationInSimpleTerms() {
        java.awt.Point mouseLocation = MouseInfo.getPointerInfo().getLocation();
        String horizontalPosition;
        if (mouseLocation.x < element.getLocation().x) {
            horizontalPosition = MOUSE_LOCATION_LEFT;
        } else if (mouseLocation.x > element.getLocation().x + element.getSize().getWidth()) {
            horizontalPosition = MOUSE_LOCATION_RIGHT;
        } else {
            horizontalPosition = MOUSE_LOCATION_INLINE;
        }
        String verticalPosition;
        if (mouseLocation.y < element.getLocation().y) {
            verticalPosition = MOUSE_LOCATION_UP;
        } else if (mouseLocation.y > element.getLocation().y + element.getSize().getHeight()) {
            verticalPosition = MOUSE_LOCATION_DOWN;
        } else {
            verticalPosition = MOUSE_LOCATION_INLINE;
        }
        return verticalPosition + "," + horizontalPosition;
    }
    private void maximizeWindowPage() throws InterruptedException {
        int[] keyEvents = new int[2];
        keyEvents[0] = KeyEvent.VK_WINDOWS;
        keyEvents[1] = KeyEvent.VK_UP;
        int startingKey=random.nextInt(2);
        if (startingKey==0) {
            robot.keyPress(keyEvents[0]);
            Thread.sleep(50 + random.nextInt(60));
            robot.keyPress(keyEvents[1]);
            Thread.sleep(10 + random.nextInt(40));
        }else {
            robot.keyPress(keyEvents[1]);
            Thread.sleep(50 + random.nextInt(60));
            robot.keyPress(keyEvents[0]);
            Thread.sleep(10 + random.nextInt(40));
        }
        int finishingKey = random.nextInt(2);
        if (finishingKey==0){
            robot.keyRelease(keyEvents[0]);
            Thread.sleep(10+random.nextInt(30));
            robot.keyRelease(keyEvents[1]);
        }else {
            robot.keyRelease(keyEvents[1]);
            Thread.sleep(10+random.nextInt(30));
            robot.keyRelease(keyEvents[0]);
        }
        if (!isWindowMaximized()){
            maximizeWindowPage();
        }
    }
    private boolean isWindowMaximized() {
        Dimension windowSize = driver.manage().window().getSize();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int threshold = 50; // Pixels threshold to account for window borders/taskbar
        return Math.abs(windowSize.height - screenSize.height) <= threshold
                && Math.abs(windowSize.width - screenSize.width) <= threshold;
    }
    private Point convertToScreenPosition() {
        // Adjust according to the browser's position and window decorations if necessary
        // This part may need adjustments based on the browser and OS
        // For simplicity, assuming the browser is in the top left corner of the screen

        // Generate a random offset within the element's width and height
        int randomXOffset = random.nextInt(element.getSize().getWidth());
        int randomYOffset = random.nextInt(element.getSize().getHeight());

        // Calculate the random point within the element
        int randomElementX = element.getLocation().getX() + randomXOffset;
        int randomElementY = element.getLocation().getY() + randomYOffset;

        return new Point(randomElementX, randomElementY);
    }
    private boolean isElementClickable() { // לוודא שכשאנחנו עושים את הבדיקה הזאת אנחנו לא מוזיזים את העכבר דרך סלניום או הרובוט
        if (!element.isDisplayed() || !element.isEnabled()) {return false;}
        String script = "var rect = arguments[0].getBoundingClientRect();" +
                "return (rect.width > 0 && rect.height > 0 &&" +
                "document.elementFromPoint(rect.left + rect.width / 2, rect.top + rect.height / 2) === arguments[0]);";
        return (Boolean) ((JavascriptExecutor) driver).executeScript(script, element);
    }
}
