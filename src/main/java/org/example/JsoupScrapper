package org.example;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
public class JsoupScrapper extends WebScrapper {
    public static WebScrapperDataBase getAllScrapedInfo(String url){
        return new WebScrapperDataBase(url,getContentType(url),getImageUrls(url),getVideoUrls(url),null);
    }

    public static HashMap<String, Integer> getKeyWordAmountOfOccurrences(String url, HashMap<String, Integer> wordAppearanceCount) {
        try {
            Document doc = Jsoup.connect(url).userAgent(Utility.getRandomUserAgent()).execute().parse();
            String text = doc.text().toLowerCase().replace(doc.title().toLowerCase(), "");
            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.println("Choose a keyword to search for (or press 0 to go back):");
                String keyword = scanner.nextLine().toLowerCase().trim();
                if (keyword.equals("0")) break;
                int count = countOccurrences(text, keyword);
                if (count > 0) {
                    System.out.println("The keyword '" + keyword + "' was found " + count + " times.");
                    wordAppearanceCount.put(keyword, count);
                } else {
                    System.out.println("The keyword '" + keyword + "' was not found!");
                }
            }
        } catch (IOException e) {
            System.err.println("Error fetching URL: " + e.getMessage());
        }
        return wordAppearanceCount;
    }

    public static ArrayList<String> getImageUrls(String url) {
        ArrayList<String> imageLinks = new ArrayList<>();
        try {
            Document doc = Jsoup.connect(url).userAgent(Utility.getRandomUserAgent()).execute().parse();
            Elements imageElements = doc.select("img[src]"); // Select all image elements with src attribute
            for (Element img : imageElements) {
                String imgSrc = img.attr("abs:src"); // Extract absolute URL of the image
                if (!imgSrc.isEmpty()) {
                    imageLinks.add(imgSrc);
                }
            }
        } catch (Exception e) {
            System.err.println("Error fetching image links from " + url + ": " + e.getMessage());
        }
        return imageLinks;
    }
    public static ArrayList<String> getVideoUrls(String url) {
        ArrayList<String> videoUrls = new ArrayList<>();
        try {
            Document doc = Jsoup.connect(url).userAgent(Utility.getRandomUserAgent()).execute().parse();
            Elements videoElements = doc.select("video");
            boolean videosFound = false;
            for (Element video : videoElements) {
                String videoSrc = video.attr("src");
                if (!videoSrc.isEmpty()) {
                    videoUrls.add(videoSrc);
                    videosFound = true;
                }
                Elements sourceElements = video.select("source"); // Check for video sources inside <source> tags
                for (Element source : sourceElements) {
                    String sourceSrc = source.attr("src");
                    if (!sourceSrc.isEmpty()) {
                        videoUrls.add(sourceSrc);
                        videosFound = true;
                    }
                }
            }
            if (!videosFound) {
                System.out.println("no videos found.");
                System.out.println("would you would you like me try using selenium?");
                System.out.println("press 1 for YES");
                System.out.println("press anything else for NO");
                Scanner scanner=new Scanner(System.in);
                if (scanner.nextLine().equals("1")){
                    videoUrls=SeleniumScrapper.getVideoUrls(url);
                }
            }
        } catch (IOException e) {System.err.println("Error fetching page: " + e.getMessage());}
        return videoUrls;
    }

}
