package org.example;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;

public class WebScrapper {
    private static final String getAllScrapedInfo="1";
    private static final String getKeyWordAmountOfOccurrences="2";
    private static final String getImageUrls="3";
    private static final String getVideoUrls="4";
    private static final String getDownloadFilesUrls="5";
    public static WebScrapperDataBase webScrapperOperator(String option,WebScrapperDataBase data){
        Utility.isConnected();
        if (Utility.isAccessAllowed(data.getUrl())){
            if (option.equals(getAllScrapedInfo)){
                return JsoupScrapper.getAllScrapedInfo(data.getUrl());
            }else if (option.equals(getKeyWordAmountOfOccurrences)){
                if (data.getCountedWordsAppearance()==null){
                    data.setCountedWordsAppearance(JsoupScrapper.getKeyWordAmountOfOccurrences(data.getUrl(),new HashMap<>()));
                }else {
                    data.setCountedWordsAppearance(JsoupScrapper.getKeyWordAmountOfOccurrences(data.getUrl(),data.getCountedWordsAppearance()));
                }
            } else if (option.equals(getImageUrls)&& data.getImageLinks()==null) {
                data.setImageLinks(JsoupScrapper.getImageUrls(data.getUrl()));
            } else if (option.equals(getVideoUrls)&& data.getVideoLinks()==null) {
                data.setVideoLinks(JsoupScrapper.getVideoUrls(data.getUrl()));
            }
        }else {
            if (option.equals(getAllScrapedInfo)){
                return SeleniumScrapper.getAllScrapedInfo(data.getUrl());
            }else if (option.equals(getKeyWordAmountOfOccurrences)){
                if (data.getCountedWordsAppearance()==null){
                    data.setCountedWordsAppearance(SeleniumScrapper.getKeyWordAmountOfOccurrences(data.getUrl(),new HashMap<>()));
                }else {
                    data.setCountedWordsAppearance(SeleniumScrapper.getKeyWordAmountOfOccurrences(data.getUrl(),data.getCountedWordsAppearance()));
                }
            } else if (option.equals(getImageUrls) && data.getImageLinks()==null) {
                data.setImageLinks(SeleniumScrapper.getImageUrls(data.getUrl()));
            } else if (option.equals(getVideoUrls) && data.getVideoLinks()==null) {
                data.setVideoLinks(SeleniumScrapper.getVideoUrls(data.getUrl()));
            }
        }
        if (option.equals(getDownloadFilesUrls)&& data.getDownloadFileLinks()==null){
            data.setDownloadFileLinks(FileLinksExtractor.getAllDownloadLinks(data.getUrl()));
        }
        return data;
    }
    public static int countOccurrences(String text, String keyWord) {
        String[] words = text.split("\\s+");
        int count = 0;
        for (String word : words) {
            if (word.equalsIgnoreCase(keyWord)) {
                count++;
            }
        }
        return count;
    }
    public static String getContentType(String urlString) {
        HttpURLConnection connection = null;
        try {
            URL url = new URL(urlString);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("HEAD");
            connection.setConnectTimeout(10000); // 10 seconds connect timeout
            connection.setReadTimeout(10000); // 10 seconds read timeout
            connection.connect();

            String contentType = connection.getContentType();
            return contentType != null ? contentType : "Content type not available";
        } catch (IOException e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
    public static ArrayList<String> getSupportedMethods(String urlStr) {
        HttpURLConnection connection = null;
        ArrayList<String> supportedMethods = new ArrayList<>();
        try {
            URL url = new URL(urlStr);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("OPTIONS");
            connection.connect();

            // Retrieve the Allow header
            Map<String, List<String>> headers = connection.getHeaderFields();
            List<String> allowHeader = headers.get("Allow");

            if (allowHeader != null && !allowHeader.isEmpty()) {
                // Split the Allow header's value into individual methods and add to the list
                for (String methods : allowHeader) {
                    supportedMethods.addAll(Arrays.asList(methods.split(", ")));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, handle specific exceptions or return an error message
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
        if(supportedMethods.isEmpty()){System.out.println("No Allow header present for " + urlStr);}
        return supportedMethods;
    }
    public static String measureResponseTime(String urlStr, String requestType) {
        HttpURLConnection connection = null;
        long startTime, endTime, responseTime;
        try {
            URL url = new URL(urlStr);
            connection = (HttpURLConnection) url.openConnection();

            // Set the request type
            connection.setRequestMethod(requestType);

            // For POST requests, enable output
            if ("POST".equalsIgnoreCase(requestType)) {
                connection.setDoOutput(true);
                // You might want to send some data in the POST request body
                // Example: connection.getOutputStream().write(postDataBytes);
            }

            // Start the timer
            startTime = System.currentTimeMillis();

            // Connect to the URL
            connection.connect();

            // Stop the timer
            endTime = System.currentTimeMillis();

            // Calculate response time
            responseTime = endTime - startTime;
            return requestType + " request response time for " + urlStr + ": " + responseTime + " milliseconds";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error in measuring response time for " + requestType + " request";
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
    /*    public static boolean doesContainJavaScriptFiles(String url) {
        try {
            Document doc = Jsoup.connect(url).get();
            Elements scriptElements = doc.select("script[src]");

            for (Element script : scriptElements) {
                String src = script.attr("src");
                if (src.endsWith(".js") || src.endsWith(".mjs")) {
                    //System.out.println("JavaScript file found: " + src);
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
    public static boolean doesContainJavascriptPdfFiles(String url) {
        try {
            Document doc = Jsoup.connect(url).get();
            Elements pdfElements = doc.select("a[href$='.pdf']");

            for (Element pdfLink : pdfElements) {
                String href = pdfLink.attr("href");
                if (href != null && !href.isEmpty()) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }*/


}
