package org.example;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
public class Utility {
    public static boolean isValidUrl(String url){try {new URL(url);return true;} catch (MalformedURLException e) {return false;}}
    public static void isConnected(){
        try {InetAddress address = InetAddress.getByName("8.8.8.8");
            boolean isReachable = address.isReachable(5000);
            if(!isReachable){System.out.println("No internet connection.");shouldCheckConnection();}
        } catch (UnknownHostException e) {System.out.println("Unknown host: " + e.getMessage());shouldCheckConnection();
        } catch (Exception e) {System.out.println("An error occurred: " + e.getMessage());shouldCheckConnection();}
    }
    private static void shouldCheckConnection(){
        Scanner scanner=new Scanner(System.in);
        System.out.println("before we proceed, please check your internet connection.");
        int hasFailedOnce=0;
        final String option1="1";
        String decision;
        do {
            if (hasFailedOnce>0){System.out.println("invalid input!!");}
            System.out.println("press "+option1+" if you wish to check again.");
            decision=scanner.nextLine();
            hasFailedOnce++;
        }while (!decision.equals(option1));
        isConnected();
    }
    public static boolean isAccessAllowed(String fullUrl) {
        try {
            String userAgent = getRandomUserAgent();
            URL url = new URL(fullUrl);
            String baseUrl = url.getProtocol() + "://" + url.getHost();

            URL robotsTxtUrl = new URL(baseUrl + "/robots.txt");
            HttpURLConnection connection = (HttpURLConnection) robotsTxtUrl.openConnection();
            connection.setRequestProperty("User-Agent", userAgent);
            connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            connection.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            connection.setRequestProperty("Accept-Encoding", "gzip, deflate, br");

            try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                String line;
                boolean isUserAgentRelevant = false;
                boolean isAllowed = true; // Default to true

                while ((line = in.readLine()) != null) {
                    line = line.trim();
                    if (line.toLowerCase().startsWith("user-agent")) {
                        isUserAgentRelevant = line.substring(11).trim().equals("*") ||
                                line.substring(11).trim().equalsIgnoreCase(userAgent);
                    } else if (isUserAgentRelevant && line.toLowerCase().startsWith("disallow")) {
                        String disallowedPath = line.substring(9).trim();
                        if (!disallowedPath.isEmpty() && url.getPath().startsWith(disallowedPath)) {
                            isAllowed = false;
                            break; // Once disallowed, no need to check further
                        }
                    }
                }
                return isAllowed;
            }
        } catch (FileNotFoundException e) {
            System.out.println("The robots.txt file does not exist.");
            return true;
        } catch (IOException e) {
            return false;
        } catch (Exception e) {
            return false;
        }
    }
    public static ChromeDriver getModifiedChromeDriver() {
        System.setProperty("webdriver.openqa.driver", "path/to/chromedriver.exe");
        ChromeOptions options = new ChromeOptions();
        //options.addArguments("--headless"); // בלתי נראה
        options.addArguments("--lang=en");
        options.addArguments("--disable-gpu");
        options.addArguments("--disable-notifications");
        options.addArguments("--enable-automation");
        options.addArguments("user-agent=" + Utility.getRandomUserAgent());
        return new ChromeDriver(options);
    }
    public static String getRandomUserAgent(){
        String[] userAgents = new String[10];
        userAgents[0] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36";
        userAgents[1] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15; rv:86.0) Gecko/20100101 Firefox/86.0";
        userAgents[2] = "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Mobile/15E148 Safari/604.1";
        userAgents[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74";
        userAgents[4] = "Mozilla/5.0 (Linux; Android 10; SM-A505FN) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36";
        userAgents[5] = "Mozilla/5.0 (iPad; CPU OS 13_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148";
        userAgents[6] = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0";
        userAgents[7] = "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko";
        userAgents[8] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.96 Safari/537.36";
        userAgents[9] = "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko";
        return userAgents[new Random().nextInt(userAgents.length)];
    }
    public static String getPersonalUserAgent() throws Exception {
        URL url = new URL("https://httpbin.org/user-agent");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            return response.toString();
        } else {
            throw new Exception("Unable to retrieve user agent");
        }
    }
    public static String promptUrl() {
        Scanner scanner = new Scanner(System.in);
        int counter=0;
        String url;
        do {
            if(counter>0){System.out.println("invalid url!");}
            System.out.println("you can press 0 at anytime to go back.");
            System.out.println("insert a url:");
            url=scanner.nextLine();
            if (url.equals("0")){return "0";}
            counter++;
        }while (!Utility.isValidUrl(url));
        return url;
    }
    public static String shouldUseMainPageUrl(String url){
        Scanner scanner=new Scanner(System.in);
        String decision;
        final String getMainWebsiteUrl="1";final String keepCurrentUrl="2";
        do {
            System.out.println("the url you gave is not the website main url!");
            System.out.println("press 1 to get the main website url.");
            System.out.println("press 2 to proceed with the current url.");
            decision=scanner.nextLine();
        }while (!decision.equals(getMainWebsiteUrl) && !decision.equals(keepCurrentUrl));
        if (decision.equals(getMainWebsiteUrl)) {
            String mainWebsiteUrl = Utility.getMainDomainUrl(url);
            if (mainWebsiteUrl != null && !mainWebsiteUrl.isEmpty()) {
                return mainWebsiteUrl;
            } else {
                System.out.println("could not find main website url, continuing with current url.");
            }
        }
        return url;
    }
    public static boolean isMainPageUrl(String url) {try {return !new URL(url).getPath().matches(".*/[^/]+/[^/]+.*");} catch (Exception e) {return false;}}
    public static String getMainDomainUrl(String url) {
        try {
            URL parsedUrl = new URL(url);
            String protocol = parsedUrl.getProtocol();
            String host = parsedUrl.getHost();
            int port = parsedUrl.getPort();
            String mainPageUrl = protocol + "://" + host;
            if (port != -1) {
                mainPageUrl += ":" + port;
            }
            return mainPageUrl;
        } catch (Exception e) {
            return null;
        }
    }
    public static boolean isRobotCheckBoxSuspectedToBePresent(String url){
        url=url.toLowerCase();
        if (url.contains("register")||url.contains("sign up")||url.contains("sign in")||
                (url.contains("reset")&& url.contains("password"))||url.contains("checkout")||
                url.contains("download")||url.contains("payment")||url.contains("subscription")
        ||(url.contains("create")&&url.contains("account"))){
            return true;
        }
        return false;
    }
    public static boolean isRobotCheckBoxPresent(WebDriver driver){
        java.util.List<WebElement> allElements = driver.findElements(By.xpath("//*"));
        for (WebElement element : allElements) {
            if (element.getAttribute("outerHTML").contains("g-recaptcha-response")) {
                return true;
            }
        }
        return false;
    }
    public static ArrayList<String> getUrlsToTest(){ // רק לצורך בדיקות
        ArrayList<String> urlsToTest=new ArrayList<>();
        urlsToTest.add("https://www.pexels.com/");
        urlsToTest.add("https://books.toscrape.com/");
        urlsToTest.add("https://scholar.archive.org/");
        urlsToTest.add("https://store.steampowered.com/app/1172470/Apex_Legends/");
        urlsToTest.add("https://www.dwsamplefiles.com/download-doc-sample-files/");
        urlsToTest.add("https://www.sciencedirect.com/science/article/pii/S2090123219301079");
        urlsToTest.add("https://www.freefullpdf.com/search_gcse/?q=sic%20power%20devices#gsc.tab=0&gsc.q=sic%20power%20devices&gsc.page=1");
        return urlsToTest;
    }
    public static int getRandomDelay() {return 1000 + new Random().nextInt(9000);} //כאשר יש כמה בקשות שמתרחשות בפונקציה

}
