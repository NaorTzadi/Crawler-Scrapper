package org.example;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;
public class FileLinksExtractor {
    //TODO: צריך למצוא עוד דרכים לצמצום כמות הלינקים החשודים
    //TODO: צריך לנסות להפחית מהמשקל של הפונקציה isSuspectedDownloadLinkADownloadLink
    //TODO: יכול להיות שצריך להשתמש בסלניום ב-isDownloadLink כדי להוריד מהחשד של אתרים
    //TODO: בסיום לזכור להעביר ל- private מה שצריך
    static final String[] downloadExtensions = new String[]{".pdf", ".doc", ".docx", ".xls", ".xlsx", ".zip", ".rar",".pptx",".mp3",".mp4"};
    public static Set<String> getAllDownloadLinks(String url){
        ChromeDriver chromeDriver = Utility.getModifiedChromeDriver();
        chromeDriver.get(url);
        Set<String> downloadLinks=new HashSet<>();
        Set<String> allLinks=extractHyperLinks(chromeDriver);
        Set<String> suspectedLinks=new HashSet<>();

        for (String link:allLinks){
            if (isDownloadLink(link)){
                downloadLinks.add(link);
            }
            String lowerCaseLink=link.toLowerCase();
            for (String extension:downloadExtensions){
                if (lowerCaseLink.endsWith(extension)){
                    downloadLinks.add(link);
                    break;
                }
                if (isSuspectedDownloadLink(link,extension)){
                    suspectedLinks.add(link);
                    break;
                }
            }
        }
        suspectedLinks.removeAll(downloadLinks);
        downloadLinks = downloadLinks.stream().filter(link -> link.length() <= 200 && !link.contains("#")).collect(Collectors.toSet());
        for(String link: suspectedLinks){
            if (isSuspectedDownloadLinkADownloadLink(link,chromeDriver)){ // כאן יכול להיות הרבה בקשות בזמן קצר ובכך להעלות את החשד
                downloadLinks.add(link);
            }
        }
        chromeDriver.close();
        return downloadLinks;
    }
    public static Set<String> extractHyperLinks(WebDriver driver) {
        Set<String> allLinks = new HashSet<>();
        extractAllHyperLinks(driver, allLinks);
        //extractAllEmbeddedLinks(driver,allLinks); //צריך לבדוק שזה עובד
        List<WebElement> iframes = driver.findElements(By.tagName("iframe"));
        for (WebElement iframe : iframes) {
            driver.switchTo().frame(iframe);
            extractAllHyperLinks(driver, allLinks);
            driver.switchTo().defaultContent();
        }
        return allLinks;
    }
    private static void extractAllHyperLinks(WebDriver driver, Set<String> allLinks) {
        List<WebElement> links = driver.findElements(By.tagName("a"));
        for (int i = 0; i < links.size(); i++) {
            try {
                WebElement link = links.get(i);
                String href = link.getAttribute("href");
                if (href != null) {
                    allLinks.add(href);
                }
            } catch (StaleElementReferenceException e) {
                links = driver.findElements(By.tagName("a"));
                i--;
            }
        }
        List<WebElement> buttons = driver.findElements(By.cssSelector("[data-jam-url]"));
        for (WebElement button : buttons) {
            String dataUrl = button.getAttribute("data-jam-url");
            if (dataUrl != null && !allLinks.contains(dataUrl)) {
                allLinks.add(dataUrl);
            }
        }
    }
    private static void extractAllEmbeddedLinks(WebDriver driver, Set<String> allLinks) {//צריך לבדוק שזה עובד
        List<WebElement> embedElements = driver.findElements(By.tagName("embed"));
        for (WebElement element : embedElements) {
            String src = element.getAttribute("src");
            System.out.println("embedded link: "+src);
            if (src != null) {
                allLinks.add(src);
            }
        }
    }
    public static boolean isSuspectedDownloadLinkADownloadLink(String link, WebDriver driver) {
        try {
            driver.get(link);
            new WebDriverWait(driver, Duration.ofSeconds(10)).until(
                    webDriver -> ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete")
            );
            if (Utility.isRobotCheckBoxSuspectedToBePresent(link)) {
                if (Utility.isRobotCheckBoxPresent(driver)){
                    return true;
                }
            } else {
                URL url = new URL(link);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("HEAD");
                connection.connect();

                int responseCode = connection.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    String contentDisposition = connection.getHeaderField("Content-Disposition");
                    String contentType = connection.getHeaderField("Content-Type");

                    if ((contentDisposition != null && contentDisposition.contains("attachment")) ||
                            (contentType != null && !contentType.contains("text/html"))) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    public static boolean isSuspectedDownloadLink(String link, String extension) {
        link = link.toLowerCase();
        return link.contains(extension.substring(1)) &&
                link.length() <= 200 &&
                !link.endsWith(".html") &&
                !link.endsWith(".php") &&
                !link.endsWith(".asp") &&
                !link.contains("#");
    }
    public static boolean isDownloadLink(String link) {
        return link.matches(".*\\.(pdf|doc|docx|xls|xlsx|ppt|pptx|zip|rar|7z|mp3|mp4)$") ||
                link.contains("file=") || link.contains("/file/") ||
                link.contains("dl_id=") || link.contains("blobtype=pdf") ||
                link.contains("filename=") || link.contains("file_id=") ||
                link.contains("id=") || link.contains("doc_id=") ||
                link.contains("action=download") || link.contains("getfile=")
                || link.contains("downloadfile=") || link.contains("token=");
    }
}
